/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package formattedFields;


import java.awt.BorderLayout;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;


/**
 *
 * @author Rogério Eduardo Pereira
 * Data Criação: Feb 27, 2014
 */
public class JTextCPF extends JFormattedTextField
{
	public JTextCPF ()
	{
		initComponents();
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Gerado ">//GEN-BEGIN:initComponents
    private void initComponents() {
        //JTextCPF = new javax.swing.JFormattedTextField();
		
		try
        {
            this.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex)
        {
            ex.printStackTrace();
        }

        this.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextCPFActionPerformed(evt);
            }
        });
        this.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                JTextCPFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                JTextCPFFocusLost(evt);
            }
        });

        //javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        BorderLayout layout = new BorderLayout();
        this.setLayout(layout);
        /*layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(this, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(this)
        );*/
    }// </editor-fold>//GEN-END:initComponents

    private void JTextCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextMoedaActionPerformed
        this.transferFocus();
    }//GEN-LAST:event_jTextMoedaActionPerformed
	
	 private void JTextCPFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextMoedaFocusLost
        //Não tem espaços em branco
		if(!this.getText().contains(" "))
		{
			//CPF Invalido
			if(!this.validaCPF())
			{
				JOptionPane.showMessageDialog(null, "CPF Inválido", "CPF Inválido",JOptionPane.INFORMATION_MESSAGE);
				this.setText("");
				this.requestFocus();
			}
		}
		//Espaço em Branco
		else
		{
			JOptionPane.showMessageDialog(null, "CPF Inválido", "CPF Inválido",JOptionPane.INFORMATION_MESSAGE);
			this.setText("");
			this.requestFocus();
		}
    }//GEN-LAST:event_jTextMoedaFocusLost
	 
	 private void JTextCPFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextMoedaFocusGained
        if (this.getText().trim().compareTo("") != 0){
            this.selectAll();
        }
	}//GEN-LAST:event_jTextMoedaFocusGained
	 
	
	 //Verifica se CPF é valido
	 public Boolean validaCPF()
	 {
		if(this.validaSequencia())
			if(this.validaPrimeiroDigito())
				if(this.validaSegundoDigito())
					return true;
		 
		 
		 return false;
	 }
	 
	 //Verifica se o CPF é uma sequencia
	 private Boolean validaSequencia()
	 {
		 String cpf = this.getText();
		 cpf		= cpf.replaceAll(".", "");
		 cpf		= cpf.replaceAll("-", "");
		 if	( 
				 (cpf.equals("11111111111")) ||
				 (cpf.equals("22222222222")) ||
				 (cpf.equals("33333333333")) ||
				 (cpf.equals("44444444444")) ||
				 (cpf.equals("55555555555")) ||
				 (cpf.equals("66666666666")) ||
				 (cpf.equals("77777777777")) ||
				 (cpf.equals("88888888888")) ||
				 (cpf.equals("99999999999")) ||
				 (cpf.equals("00000000000"))
			)
			 return false;
		 
		 return true;
	 }
	 
	 private Boolean validaPrimeiroDigito()
	 {
		 String cpf		= new String();
		 int	soma	= 0;
		 int	j       = 10;
		 int	compara;
		 cpf			= this.getText().toString();
		 cpf			= cpf.replace(".", "");
		 cpf			= cpf.replace("-", "");
		 
		 for(int i=0; i<9; i++)
		 {
			soma += Integer.parseInt(cpf.substring(i, i+1)) * j;
			j--;
		 }
		 
		 soma = soma % 11;
		 
		 if((soma == 0) || (soma == 1))
			 compara = 0;
		 else
			 compara = 11 - soma;
		 
		 if(Integer.parseInt(cpf.substring(9, 10)) == compara)
			return true;
		 else
			return false;
	 }
	 
	 private Boolean validaSegundoDigito()
	 {
		 String cpf		= new String();
		 int	soma	= 0;
		 int	j		= 11;
		 int	compara;
		 cpf			= this.getText().toString();
		 cpf			= cpf.replace(".", "");
		 cpf			= cpf.replace("-", "");
		 
		 for(int i=0; i<10; i++)
		 {
			soma += Integer.parseInt(cpf.substring(i, i+1)) * j;
			j--;
		 }
		 
		 soma = soma % 11;
		 
		 if((soma == 0) || (soma == 1))
			 compara = 0;
		 else
			 compara = 11 - soma;
		 
		 if(Integer.parseInt(cpf.substring(10, 11)) == compara)
			return true;
		 else
			return false;
	 }
	 
	/*public String getText()
	{
		return this.getText();
	}
	
	public void setText(String cep)
	{
		this.setText(cep);
	} 
	 
	public void setEnabled(Boolean habilita)
	{
		this.setEnabled(habilita);
	}*/
	
	//public JFormattedTextField JTextCPF;
}
