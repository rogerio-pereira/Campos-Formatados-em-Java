/*
 * Copyright (C) 2014 Rogério Eduardo Pereira
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package formattedFields;


import java.awt.BorderLayout;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;


/*
 *	Arquivo  JTextHora.java
 *	Campo Formatado para Hora, no formato ##:##
 *	
 *	Sistema:	CamposFormatados
 *	Autor:      Rogério Eduardo Pereira
 *	Data:       12/03/2014
 */
public class JTextHora extends JFormattedTextField
{
	/*
	 * Construtor
	 */
	public JTextHora ()
	{
		initComponents();
	}
	
	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Gerado ">//GEN-BEGIN:initComponents
    private void initComponents() {
        //JTextHora = new javax.swing.JFormattedTextField();
		
		try
        {
            this.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex)
        {
            ex.printStackTrace();
        }

        this.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTextHoraActionPerformed(evt);
            }
        });
        this.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                JTextHoraFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                JTextHoraFocusLost(evt);
            }
        });

        //javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        BorderLayout layout = new BorderLayout();
        this.setLayout(layout);
        /*layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JTextHora, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JTextHora)
        );*/
    }// </editor-fold>//GEN-END:initComponents

    private void JTextHoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextMoedaActionPerformed
        this.transferFocus();
    }//GEN-LAST:event_jTextMoedaActionPerformed
	
	 private void JTextHoraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextMoedaFocusLost
        //Não tem espaços em branco
		if(!this.getText().contains(" "))
		{
			if(!this.validaHora())
			{
				JOptionPane.showMessageDialog(null, "Hora Inválida", "Hora Inválida",JOptionPane.INFORMATION_MESSAGE);
				this.requestFocus();
				this.setText(null);
			}
		}
		//Espaço em Branco
		else
		{
			if(!this.getText().equals("  :  "))
			{
				JOptionPane.showMessageDialog(null, "Hora Inválida", "Hora Inválida",JOptionPane.INFORMATION_MESSAGE);
				this.requestFocus();
				this.setText(null);
			}
		}
    }//GEN-LAST:event_jTextMoedaFocusLost
	 
	 private void JTextHoraFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextMoedaFocusGained
        if (this.getText().trim().compareTo("") != 0){
            this.selectAll();
        }
	}//GEN-LAST:event_jTextMoedaFocusGained
	 
	
	private Boolean validaHora()
	{
		String[] hora = this.getText().split(":");
		
		//Verifica horas
		if((Integer.parseInt(hora[0]) < 0) || (Integer.parseInt(hora[0]) > 23))
			return false;
		//Verifica minutos
		if((Integer.parseInt(hora[1]) < 0) || (Integer.parseInt(hora[1]) > 59))
			return false;
	
		return true;
	}
	 
	/*public String getText()
	{
		return this.JTextHora.getText();
	}
	
	public void setText(String hora)
	{
		this.JTextHora.setText(hora);
	} 
	 
	public void setEnabled(Boolean habilita)
	{
		this.JTextHora.setEnabled(habilita);
	}*/
	
	//public JFormattedTextField JTextHora;
}
